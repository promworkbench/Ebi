package org.processmining.ebi.plugins;

import org.processmining.contexts.uitopia.annotations.UITopiaVariant;
import org.processmining.ebi.CallEbi;
import org.processmining.framework.plugin.PluginContext;
import org.processmining.framework.plugin.annotations.Plugin;
import org.processmining.framework.plugin.annotations.PluginCategory;
import org.processmining.framework.plugin.annotations.PluginLevel;
import org.processmining.framework.plugin.annotations.PluginVariant;
import org.processmining.plugins.InductiveMiner.plugins.dialogs.IMMiningDialog;


/**
 * This file is automatically generated by Ebi. Do not edit it manually.
 * @author sander
 *
 */
public class EbiCommandPlugin {



// == command Ebi analyse all-traces == 



// == command Ebi analyse completeness == 

	public static org.processmining.framework.util.HTMLToString Ebi_analyse_completeness__as__fraction__to__fraction_html(org.deckfour.xes.model.XLog input_0) {
		String result = CallEbi.call_ebi("Ebi analyse completeness", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(result);
	}

	@Plugin(
		name = "Estimate the completeness of a finite language using species discovery.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Estimate the completeness of a finite language using species discovery."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_analyse_completeness__as__fraction__to__fraction_html(PluginContext context, org.deckfour.xes.model.XLog input_0) {
		return Ebi_analyse_completeness__as__fraction__to__fraction_html(input_0);
	}



// == command Ebi analyse medoid == 



// == command Ebi analyse minimum-probability-traces == 



// == command Ebi analyse mode == 



// == command Ebi analyse most-likely-traces == 



// == command Ebi analyse-non-stochastic alignment == 



// == command Ebi analyse-non-stochastic cluster == 



// == command Ebi analyse-non-stochastic medoid == 



// == command Ebi association all-trace-attributes == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi association trace-attribute == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi conformance entropic-relevance == 

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv_html(org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi conformance entropic-relevance", ".logdiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiLogDiv.fromEbiString(result);
	}

	@Plugin(
		name = "Compute entropic relevance (uniform).",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute entropic relevance (uniform)."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv_html(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		return Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv_html(input_0, input_1);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv_html(org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) {
		String result = CallEbi.call_ebi("Ebi conformance entropic-relevance", ".logdiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_1)});
		return org.processmining.ebi.objects.EbiLogDiv.fromEbiString(result);
	}

	@Plugin(
		name = "Compute entropic relevance (uniform).",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute entropic relevance (uniform)."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv_html(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) {
		return Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv_html(input_0, input_1);
	}



// == command Ebi conformance jensen-shannon == 

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon__as__rootlogdiv__to__logdiv_html(org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_1)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon__as__rootlogdiv__to__logdiv_html(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) {
		return Ebi_conformance_jensen_shannon__as__rootlogdiv__to__logdiv_html(input_0, input_1);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon__as__rootlogdiv__to__logdiv_html(org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon__as__rootlogdiv__to__logdiv_html(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		return Ebi_conformance_jensen_shannon__as__rootlogdiv__to__logdiv_html(input_0, input_1);
	}



// == command Ebi conformance jensen-shannon-sample == 

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0, org.deckfour.xes.model.XLog input_1, int input_2) {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "StochasticLabelledPetriNet", "XLog", "integer" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1, 2 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0, org.deckfour.xes.model.XLog input_1, int input_2) {
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(input_0, input_1, input_2);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1, int input_2) {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "StochasticLabelledPetriNet", "StochasticLabelledPetriNet", "integer" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1, 2 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1, int input_2) {
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(input_0, input_1, input_2);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1, int input_2) {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "XLog", "integer" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1, 2 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1, int input_2) {
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(input_0, input_1, input_2);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1, int input_2) {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet", "integer" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1, 2 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1, int input_2) {
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__logdiv_html(input_0, input_1, input_2);
	}



// == command Ebi conformance unit-earth-movers-stochastic-conformance == 

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction_html(org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi conformance unit-earth-movers-stochastic-conformance", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(result);
	}

	@Plugin(
		name = "Compute unit-earth movers' stochastic conformance.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute unit-earth movers' stochastic conformance."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction_html(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		return Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction_html(input_0, input_1);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction_html(org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) {
		String result = CallEbi.call_ebi("Ebi conformance unit-earth-movers-stochastic-conformance", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(result);
	}

	@Plugin(
		name = "Compute unit-earth movers' stochastic conformance.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute unit-earth movers' stochastic conformance."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction_html(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) {
		return Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction_html(input_0, input_1);
	}



// == command Ebi convert finite-stochastic-language == 



// == command Ebi convert labelled-Petri-net == 

	public static org.processmining.acceptingpetrinet.models.AcceptingPetriNet Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__AcceptingPetriNet(org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi convert labelled-Petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetrinet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiLabelledPetriNet2AcceptingPetrinet(result);
	}

	@Plugin(
		name = "Convert an object to a labelled Petri net.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "AcceptingPetriNet" }, 
		returnTypes = { org.processmining.acceptingpetrinet.models.AcceptingPetriNet.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a labelled Petri net."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.acceptingpetrinet.models.AcceptingPetriNet prom_Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__AcceptingPetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		return Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__AcceptingPetriNet(input_0);
	}

	public static org.processmining.acceptingpetrinet.models.AcceptingPetriNet Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__AcceptingPetriNet(org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi convert labelled-Petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiLabelledPetriNet2AcceptingPetrinet(result);
	}

	@Plugin(
		name = "Convert an object to a labelled Petri net.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "AcceptingPetriNet" }, 
		returnTypes = { org.processmining.acceptingpetrinet.models.AcceptingPetriNet.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a labelled Petri net."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.acceptingpetrinet.models.AcceptingPetriNet prom_Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__AcceptingPetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		return Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__AcceptingPetriNet(input_0);
	}



// == command Ebi convert stochastic-finite-deterministic-automaton == 

	public static org.processmining.acceptingpetrinet.models.AcceptingPetriNet Ebi_convert_stochastic_finite_deterministic_automaton__as__labelled_Petri_net__to__AcceptingPetriNet(org.deckfour.xes.model.XLog input_0) {
		String result = CallEbi.call_ebi("Ebi convert stochastic-finite-deterministic-automaton", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiLabelledPetriNet2AcceptingPetrinet(result);
	}

	@Plugin(
		name = "Convert an object to a finite stochastic language.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "AcceptingPetriNet" }, 
		returnTypes = { org.processmining.acceptingpetrinet.models.AcceptingPetriNet.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a finite stochastic language."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.acceptingpetrinet.models.AcceptingPetriNet prom_Ebi_convert_stochastic_finite_deterministic_automaton__as__labelled_Petri_net__to__AcceptingPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) {
		return Ebi_convert_stochastic_finite_deterministic_automaton__as__labelled_Petri_net__to__AcceptingPetriNet(input_0);
	}



// == command Ebi discover alignments == 

	public static org.processmining.acceptingpetrinet.models.AcceptingPetriNet Ebi_discover_alignments__as__labelled_Petri_net__to__AcceptingPetriNet(org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetrinet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiLabelledPetriNet2AcceptingPetrinet(result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "AcceptingPetriNet" }, 
		returnTypes = { org.processmining.acceptingpetrinet.models.AcceptingPetriNet.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.acceptingpetrinet.models.AcceptingPetriNet prom_Ebi_discover_alignments__as__labelled_Petri_net__to__AcceptingPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) {
		return Ebi_discover_alignments__as__labelled_Petri_net__to__AcceptingPetriNet(input_0, input_1);
	}

	public static org.processmining.acceptingpetrinet.models.AcceptingPetriNet Ebi_discover_alignments__as__labelled_Petri_net__to__AcceptingPetriNet(org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiLabelledPetriNet2AcceptingPetrinet(result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "AcceptingPetriNet" }, 
		returnTypes = { org.processmining.acceptingpetrinet.models.AcceptingPetriNet.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.acceptingpetrinet.models.AcceptingPetriNet prom_Ebi_discover_alignments__as__labelled_Petri_net__to__AcceptingPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		return Ebi_discover_alignments__as__labelled_Petri_net__to__AcceptingPetriNet(input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetrinet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiLabelledPetriNet2LabelledPetriNet(result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet prom_Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) {
		return Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiLabelledPetriNet2LabelledPetriNet(result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet prom_Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		return Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(input_0, input_1);
	}



// == command Ebi discover occurrence == 

	public static org.processmining.acceptingpetrinet.models.AcceptingPetriNet Ebi_discover_occurrence__as__labelled_Petri_net__to__AcceptingPetriNet(org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi discover occurrence", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiLabelledPetriNet2AcceptingPetrinet(result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "AcceptingPetriNet" }, 
		returnTypes = { org.processmining.acceptingpetrinet.models.AcceptingPetriNet.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.acceptingpetrinet.models.AcceptingPetriNet prom_Ebi_discover_occurrence__as__labelled_Petri_net__to__AcceptingPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		return Ebi_discover_occurrence__as__labelled_Petri_net__to__AcceptingPetriNet(input_0, input_1);
	}

	public static org.processmining.acceptingpetrinet.models.AcceptingPetriNet Ebi_discover_occurrence__as__labelled_Petri_net__to__AcceptingPetriNet(org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi discover occurrence", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetrinet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiLabelledPetriNet2AcceptingPetrinet(result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "AcceptingPetriNet" }, 
		returnTypes = { org.processmining.acceptingpetrinet.models.AcceptingPetriNet.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.acceptingpetrinet.models.AcceptingPetriNet prom_Ebi_discover_occurrence__as__labelled_Petri_net__to__AcceptingPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) {
		return Ebi_discover_occurrence__as__labelled_Petri_net__to__AcceptingPetriNet(input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi discover occurrence", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiLabelledPetriNet2LabelledPetriNet(result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet prom_Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_1) {
		return Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) {
		String result = CallEbi.call_ebi("Ebi discover occurrence", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetrinet2EbiLabelledPetriNet(input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiLabelledPetriNet2LabelledPetriNet(result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet prom_Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) {
		return Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(input_0, input_1);
	}



// == command Ebi discover uniform == 

	public static org.processmining.acceptingpetrinet.models.AcceptingPetriNet Ebi_discover_uniform__as__labelled_Petri_net__to__AcceptingPetriNet(org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi discover uniform", ".lpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetrinet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiLabelledPetriNet2AcceptingPetrinet(result);
	}

	@Plugin(
		name = "Give each transition a weight of 1.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "AcceptingPetriNet" }, 
		returnTypes = { org.processmining.acceptingpetrinet.models.AcceptingPetriNet.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.acceptingpetrinet.models.AcceptingPetriNet prom_Ebi_discover_uniform__as__labelled_Petri_net__to__AcceptingPetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		return Ebi_discover_uniform__as__labelled_Petri_net__to__AcceptingPetriNet(input_0);
	}

	public static org.processmining.acceptingpetrinet.models.AcceptingPetriNet Ebi_discover_uniform__as__labelled_Petri_net__to__AcceptingPetriNet(org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi discover uniform", ".lpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiLabelledPetriNet2AcceptingPetrinet(result);
	}

	@Plugin(
		name = "Give each transition a weight of 1.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "AcceptingPetriNet" }, 
		returnTypes = { org.processmining.acceptingpetrinet.models.AcceptingPetriNet.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.acceptingpetrinet.models.AcceptingPetriNet prom_Ebi_discover_uniform__as__labelled_Petri_net__to__AcceptingPetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		return Ebi_discover_uniform__as__labelled_Petri_net__to__AcceptingPetriNet(input_0);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi discover uniform", ".slpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetrinet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiLabelledPetriNet2LabelledPetriNet(result);
	}

	@Plugin(
		name = "Give each transition a weight of 1.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet prom_Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		return Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(input_0);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi discover uniform", ".slpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiLabelledPetriNet2LabelledPetriNet(result);
	}

	@Plugin(
		name = "Give each transition a weight of 1.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet prom_Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		return Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(input_0);
	}



// == command Ebi information == 

	public static String Ebi_information__as__string__to__string_html(org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(result);
	}

	@Plugin(
		name = "Show information about an object.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string_html" }, 
		returnTypes = { String.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about an object."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string_html(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		return Ebi_information__as__string__to__string_html(input_0);
	}

	public static String Ebi_information__as__string__to__string_html(org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetrinet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(result);
	}

	@Plugin(
		name = "Show information about an object.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string_html" }, 
		returnTypes = { String.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about an object."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string_html(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		return Ebi_information__as__string__to__string_html(input_0);
	}

	public static String Ebi_information__as__string__to__string_html(org.deckfour.xes.model.XLog input_0) {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(result);
	}

	@Plugin(
		name = "Show information about an object.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string_html" }, 
		returnTypes = { String.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about an object."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string_html(PluginContext context, org.deckfour.xes.model.XLog input_0) {
		return Ebi_information__as__string__to__string_html(input_0);
	}



// == command Ebi latex-help graph == 

	public static String Ebi_latex_help_graph__as__string__to__string_html() {
		String result = CallEbi.call_ebi("Ebi latex-help graph", ".txt", new String[] {});
		return org.processmining.ebi.objects.EbiString.fromEbiString(result);
	}

	@Plugin(
		name = "Print the graph of Ebi.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string_html" }, 
		returnTypes = { String.class },
		parameterLabels = { "" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Print the graph of Ebi."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = {  })
	public String prom_Ebi_latex_help_graph__as__string__to__string_html(PluginContext context) {
		return Ebi_latex_help_graph__as__string__to__string_html();
	}



// == command Ebi latex-help java == 

	public static String Ebi_latex_help_java__as__string__to__string_html() {
		String result = CallEbi.call_ebi("Ebi latex-help java", ".txt", new String[] {});
		return org.processmining.ebi.objects.EbiString.fromEbiString(result);
	}

	@Plugin(
		name = "Print the classes for Java.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string_html" }, 
		returnTypes = { String.class },
		parameterLabels = { "" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Print the classes for Java."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = {  })
	public String prom_Ebi_latex_help_java__as__string__to__string_html(PluginContext context) {
		return Ebi_latex_help_java__as__string__to__string_html();
	}



// == command Ebi latex-help manual == 

	public static String Ebi_latex_help_manual__as__string__to__string_html() {
		String result = CallEbi.call_ebi("Ebi latex-help manual", ".txt", new String[] {});
		return org.processmining.ebi.objects.EbiString.fromEbiString(result);
	}

	@Plugin(
		name = "Print the automatically generated parts of the manual of Ebi in Latex format.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string_html" }, 
		returnTypes = { String.class },
		parameterLabels = { "" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Print the automatically generated parts of the manual of Ebi in Latex format."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = {  })
	public String prom_Ebi_latex_help_manual__as__string__to__string_html(PluginContext context) {
		return Ebi_latex_help_manual__as__string__to__string_html();
	}



// == command Ebi probability explain-trace == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi probability model == 

	public static org.processmining.framework.util.HTMLToString Ebi_probability_model__as__fraction__to__fraction_html(org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) {
		String result = CallEbi.call_ebi("Ebi probability model", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(result);
	}

	@Plugin(
		name = "Compute the probability that a queriable stochastic language (stochastic model) produces any trace of the model.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute the probability that a queriable stochastic language (stochastic model) produces any trace of the model."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_probability_model__as__fraction__to__fraction_html(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) {
		return Ebi_probability_model__as__fraction__to__fraction_html(input_0, input_1);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_probability_model__as__fraction__to__fraction_html(org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0, org.deckfour.xes.model.XLog input_1) {
		String result = CallEbi.call_ebi("Ebi probability model", ".frac", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(result);
	}

	@Plugin(
		name = "Compute the probability that a queriable stochastic language (stochastic model) produces any trace of the model.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "StochasticLabelledPetriNet", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute the probability that a queriable stochastic language (stochastic model) produces any trace of the model."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_probability_model__as__fraction__to__fraction_html(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0, org.deckfour.xes.model.XLog input_1) {
		return Ebi_probability_model__as__fraction__to__fraction_html(input_0, input_1);
	}



// == command Ebi probability trace == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi sample == 



// == command Ebi test log-categorical-attribute == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi validate == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi visualise svg == 

	public static com.kitfox.svg.SVGDiagram Ebi_visualise_svg__as__SVG__to__svg(org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi visualise svg", ".svg", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetrinet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiSvg.fromEbiString(result);
	}

	@Plugin(
		name = "Visualise an object as scalable vector graphics.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "svg" }, 
		returnTypes = { com.kitfox.svg.SVGDiagram.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as scalable vector graphics."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public com.kitfox.svg.SVGDiagram prom_Ebi_visualise_svg__as__SVG__to__svg(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		return Ebi_visualise_svg__as__SVG__to__svg(input_0);
	}

	public static com.kitfox.svg.SVGDiagram Ebi_visualise_svg__as__SVG__to__svg(org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi visualise svg", ".svg", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiSvg.fromEbiString(result);
	}

	@Plugin(
		name = "Visualise an object as scalable vector graphics.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "svg" }, 
		returnTypes = { com.kitfox.svg.SVGDiagram.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as scalable vector graphics."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public com.kitfox.svg.SVGDiagram prom_Ebi_visualise_svg__as__SVG__to__svg(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		return Ebi_visualise_svg__as__SVG__to__svg(input_0);
	}



// == command Ebi visualise text == 

	public static String Ebi_visualise_text__as__string__to__string_html(org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.LabelledPetriNet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(result);
	}

	@Plugin(
		name = "Visualise an object as text.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string_html" }, 
		returnTypes = { String.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as text."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string_html(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNet input_0) {
		return Ebi_visualise_text__as__string__to__string_html(input_0);
	}

	public static String Ebi_visualise_text__as__string__to__string_html(org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetrinet2EbiLabelledPetriNet(input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(result);
	}

	@Plugin(
		name = "Visualise an object as text.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string_html" }, 
		returnTypes = { String.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as text."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string_html(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) {
		return Ebi_visualise_text__as__string__to__string_html(input_0);
	}

	public static String Ebi_visualise_text__as__string__to__string_html(org.deckfour.xes.model.XLog input_0) {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiEventLog(input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(result);
	}

	@Plugin(
		name = "Visualise an object as text.",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string_html" }, 
		returnTypes = { String.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as text."
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string_html(PluginContext context, org.deckfour.xes.model.XLog input_0) {
		return Ebi_visualise_text__as__string__to__string_html(input_0);
	}

}

