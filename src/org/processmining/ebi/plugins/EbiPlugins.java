package org.processmining.ebi.plugins;

import org.deckfour.uitopia.api.event.TaskListener.InteractionResult;
import org.processmining.contexts.uitopia.UIPluginContext;
import org.processmining.contexts.uitopia.annotations.UITopiaVariant;
import org.processmining.ebi.CallEbi;
import org.processmining.framework.plugin.PluginContext;
import org.processmining.framework.plugin.annotations.Plugin;
import org.processmining.framework.plugin.annotations.PluginCategory;
import org.processmining.framework.plugin.annotations.PluginLevel;
import org.processmining.framework.plugin.annotations.PluginVariant;
import org.processmining.plugins.InductiveMiner.plugins.dialogs.IMMiningDialog;


/**
 * This file is automatically generated by Ebi. Do not edit it manually.
 * @author sander
 *
 */
public class EbiPlugins {



// == command Ebi analyse all-traces == 



// == command Ebi analyse completeness == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_analyse_completeness__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse completeness", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Estimate the completeness of an event log using species discovery. (input: XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Estimate the completeness of an event log using species discovery. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_analyse_completeness__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_analyse_completeness__as__fraction__to__fraction(context, input_0);
	}



// == command Ebi analyse coverage == 



// == command Ebi analyse directly-follows-edge-difference == 



// == command Ebi analyse medoid == 



// == command Ebi analyse minimum-probability-traces == 



// == command Ebi analyse mode == 



// == command Ebi analyse most-likely-traces == 



// == command Ebi analyse variety == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_analyse_variety__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse variety", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute the variety of a stochastic language. That is, the average distance between two arbitrary traces in the language. (input: XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute the variety of a stochastic language. That is, the average distance between two arbitrary traces in the language. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_analyse_variety__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_analyse_variety__as__fraction__to__fraction(context, input_0);
	}



// == command Ebi analyse-non-stochastic activities == 

	public static String Ebi_analyse_non_stochastic_activities__as__string__to__string(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic activities", ".txt", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Shows the activities that are declared in the object. (input: AcceptingPetriNet; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Shows the activities that are declared in the object. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_analyse_non_stochastic_activities__as__string__to__string(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_analyse_non_stochastic_activities__as__string__to__string(context, input_0);
	}

	public static String Ebi_analyse_non_stochastic_activities__as__string__to__string(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic activities", ".txt", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Shows the activities that are declared in the object. (input: StochasticLabelledPetriNet; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Shows the activities that are declared in the object. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_analyse_non_stochastic_activities__as__string__to__string(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_analyse_non_stochastic_activities__as__string__to__string(context, input_0);
	}

	public static String Ebi_analyse_non_stochastic_activities__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic activities", ".txt", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Shows the activities that are declared in the object. (input: XLog; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Shows the activities that are declared in the object. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_analyse_non_stochastic_activities__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_analyse_non_stochastic_activities__as__string__to__string(context, input_0);
	}

	public static String Ebi_analyse_non_stochastic_activities__as__string__to__string(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic activities", ".txt", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Shows the activities that are declared in the object. (input: ProcessTree; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Shows the activities that are declared in the object. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_analyse_non_stochastic_activities__as__string__to__string(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_analyse_non_stochastic_activities__as__string__to__string(context, input_0);
	}



// == command Ebi analyse-non-stochastic any-traces == 

	public static java.lang.Boolean Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic any-traces", ".bool", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has any traces. (input: AcceptingPetriNet; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has any traces.        Reasons for a model not to have any traces could be if the initial state is part of a livelock, or if there is no initial state.        'true' means that the model has traces, 'false' means that the model has no traces.        The computation may not terminate if the model is unbounded. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(context, input_0);
	}

	public static java.lang.Boolean Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic any-traces", ".bool", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has any traces. (input: ProcessTree; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has any traces.        Reasons for a model not to have any traces could be if the initial state is part of a livelock, or if there is no initial state.        'true' means that the model has traces, 'false' means that the model has no traces.        The computation may not terminate if the model is unbounded. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(context, input_0);
	}

	public static java.lang.Boolean Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic any-traces", ".bool", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has any traces. (input: XLog; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has any traces.        Reasons for a model not to have any traces could be if the initial state is part of a livelock, or if there is no initial state.        'true' means that the model has traces, 'false' means that the model has no traces.        The computation may not terminate if the model is unbounded. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(context, input_0);
	}

	public static java.lang.Boolean Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic any-traces", ".bool", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has any traces. (input: StochasticLabelledPetriNet; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has any traces.        Reasons for a model not to have any traces could be if the initial state is part of a livelock, or if there is no initial state.        'true' means that the model has traces, 'false' means that the model has no traces.        The computation may not terminate if the model is unbounded. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_analyse_non_stochastic_any_traces__as__boolean__to__boolean(context, input_0);
	}



// == command Ebi analyse-non-stochastic bounded == 

	public static java.lang.Boolean Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic bounded", ".bool", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has a bounded state space. (input: AcceptingPetriNet; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has a bounded state space.         For Petri nets, a coverability graph is computed .         For other types of models, `true' is returned. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(context, input_0);
	}

	public static java.lang.Boolean Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic bounded", ".bool", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has a bounded state space. (input: XLog; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has a bounded state space.         For Petri nets, a coverability graph is computed .         For other types of models, `true' is returned. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(context, input_0);
	}

	public static java.lang.Boolean Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic bounded", ".bool", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has a bounded state space. (input: StochasticLabelledPetriNet; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has a bounded state space.         For Petri nets, a coverability graph is computed .         For other types of models, `true' is returned. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(context, input_0);
	}

	public static java.lang.Boolean Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic bounded", ".bool", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has a bounded state space. (input: ProcessTree; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has a bounded state space.         For Petri nets, a coverability graph is computed .         For other types of models, `true' is returned. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_analyse_non_stochastic_bounded__as__boolean__to__boolean(context, input_0);
	}



// == command Ebi analyse-non-stochastic cluster == 



// == command Ebi analyse-non-stochastic executions == 



// == command Ebi analyse-non-stochastic infinitely-many-traces == 

	public static java.lang.Boolean Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic infinitely-many-traces", ".bool", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has infinitely many traces. (input: AcceptingPetriNet; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has infinitely many traces. The computation may not terminate if the model is unbounded. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(context, input_0);
	}

	public static java.lang.Boolean Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic infinitely-many-traces", ".bool", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has infinitely many traces. (input: XLog; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has infinitely many traces. The computation may not terminate if the model is unbounded. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(context, input_0);
	}

	public static java.lang.Boolean Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic infinitely-many-traces", ".bool", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has infinitely many traces. (input: ProcessTree; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has infinitely many traces. The computation may not terminate if the model is unbounded. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(context, input_0);
	}

	public static java.lang.Boolean Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse-non-stochastic infinitely-many-traces", ".bool", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiBoolean.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute whether the model has infinitely many traces. (input: StochasticLabelledPetriNet; output: boolean)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "boolean" }, 
		returnTypes = { java.lang.Boolean.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute whether the model has infinitely many traces. The computation may not terminate if the model is unbounded. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public java.lang.Boolean prom_Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_analyse_non_stochastic_infinitely_many_traces__as__boolean__to__boolean(context, input_0);
	}



// == command Ebi analyse-non-stochastic medoid == 



// == command Ebi association all-trace-attributes == 

	public static String Ebi_association_all_trace_attributes__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0, Integer input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi association all-trace-attributes", ".txt", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute the association between the process and trace attributes. (input: XLog; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute the association between the process and trace attributes. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_association_all_trace_attributes__as__string__to__string(UIPluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("The number of samples taken."));
		InteractionResult result = context.showWizard("Compute the association between the process and trace attributes.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_1 = dialog.get_parameter_Integer(0);
		return Ebi_association_all_trace_attributes__as__string__to__string(context, input_0, input_1);
	}



// == command Ebi association trace-attribute == 

	public static org.processmining.framework.util.HTMLToString Ebi_association_trace_attribute__as__containsroot__to__containsroot_html(PluginContext context, org.deckfour.xes.model.XLog input_0, String input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi association trace-attribute", ".croot", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiString.toEbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiContainsRoot.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute the association between the process and a trace attribute. (input: XLog; output: containsroot_html)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "containsroot_html" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute the association between the process and a trace attribute. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_association_trace_attribute__as__containsroot__to__containsroot_html(UIPluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiString.create_input_panel("The trace attribute for which association is to be computed. The trace attributes of a log can be found using `Ebi info`."));
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("The number of samples."));
		InteractionResult result = context.showWizard("Compute the association between the process and a trace attribute.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		String input_1 = dialog.get_parameter_String(0);
		Integer input_2 = dialog.get_parameter_Integer(1);
		return Ebi_association_trace_attribute__as__containsroot__to__containsroot_html(context, input_0, input_1, input_2);
	}



// == command Ebi conformance earth-movers-stochastic-conformance == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_conformance_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance earth-movers-stochastic-conformance", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Earth mover's stochastic conformance. (input: XLog, XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Earth mover's stochastic conformance, also known as the Wasserstein distance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_conformance_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_conformance_earth_movers_stochastic_conformance__as__fraction__to__fraction(context, input_0, input_1);
	}



// == command Ebi conformance earth-movers-stochastic-conformance-sample == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance earth-movers-stochastic-conformance-sample", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Earth mover's stochastic conformance with sampling. (input: XLog, StochasticLabelledPetriNet; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Earth mover's stochastic conformance with sampling, also known as the Wasserstein distance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(UIPluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Earth mover's stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(context, input_0, input_1, input_2);
	}

	public static org.apache.commons.math3.fraction.BigFraction Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance earth-movers-stochastic-conformance-sample", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Earth mover's stochastic conformance with sampling. (input: XLog, XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Earth mover's stochastic conformance with sampling, also known as the Wasserstein distance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(UIPluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Earth mover's stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(context, input_0, input_1, input_2);
	}



// == command Ebi conformance entropic-relevance == 

	public static org.processmining.ebi.objects.EbiLogDiv Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance entropic-relevance", ".logdiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute entropic relevance (uniform). (input: XLog, StochasticLabelledPetriNet; output: logdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv" }, 
		returnTypes = { org.processmining.ebi.objects.EbiLogDiv.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute entropic relevance (uniform). (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.ebi.objects.EbiLogDiv prom_Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(context, input_0, input_1);
	}

	public static org.processmining.ebi.objects.EbiLogDiv Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance entropic-relevance", ".logdiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute entropic relevance (uniform). (input: XLog, XLog; output: logdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv" }, 
		returnTypes = { org.processmining.ebi.objects.EbiLogDiv.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute entropic relevance (uniform). (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.ebi.objects.EbiLogDiv prom_Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(context, input_0, input_1);
	}



// == command Ebi conformance jensen-shannon == 

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance. (input: XLog, StochasticLabelledPetriNet; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance. (input: XLog, XLog; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1);
	}



// == command Ebi conformance jensen-shannon-sample == 

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling. (input: XLog, StochasticLabelledPetriNet; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(UIPluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Jensen-Shannon stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1, input_2);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling. (input: XLog, XLog; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(UIPluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Jensen-Shannon stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1, input_2);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling. (input: StochasticLabelledPetriNet, StochasticLabelledPetriNet; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "StochasticLabelledPetriNet", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(UIPluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Jensen-Shannon stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1, input_2);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.deckfour.xes.model.XLog input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling. (input: StochasticLabelledPetriNet, XLog; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "StochasticLabelledPetriNet", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(UIPluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Jensen-Shannon stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1, input_2);
	}



// == command Ebi conformance unit-earth-movers-stochastic-conformance == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance unit-earth-movers-stochastic-conformance", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute unit-earth movers' stochastic conformance. (input: XLog, XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute unit-earth movers' stochastic conformance, also known as total variation distance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(context, input_0, input_1);
	}

	public static org.apache.commons.math3.fraction.BigFraction Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance unit-earth-movers-stochastic-conformance", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute unit-earth movers' stochastic conformance. (input: XLog, StochasticLabelledPetriNet; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute unit-earth movers' stochastic conformance, also known as total variation distance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(context, input_0, input_1);
	}



// == command Ebi conformance-non-stochastic alignments == 



// == command Ebi conformance-non-stochastic escaping-edges-precision == 



// == command Ebi conformance-non-stochastic set-alignments == 



// == command Ebi conformance-non-stochastic trace-fitness == 



// == command Ebi convert finite-stochastic-language == 



// == command Ebi convert labelled-petri-net == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_convert_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi convert labelled-petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Convert an object to a labelled Petri net. (input: ProcessTree; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_convert_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_convert_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_convert_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi convert labelled-petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Convert an object to a labelled Petri net. (input: StochasticLabelledPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_convert_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_convert_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_convert_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi convert labelled-petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Convert an object to a labelled Petri net. (input: AcceptingPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_convert_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_convert_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}



// == command Ebi convert stochastic-finite-deterministic-automaton == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_convert_stochastic_finite_deterministic_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi convert stochastic-finite-deterministic-automaton", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Convert an object to a stochastic deterministic finite automaton. (input: XLog; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a stochastic deterministic finite automaton. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_convert_stochastic_finite_deterministic_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_convert_stochastic_finite_deterministic_automaton__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}



// == command Ebi discover alignments == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. (input: XLog, ProcessTree; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		return Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. (input: XLog, AcceptingPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		return Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. (input: XLog, StochasticLabelledPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. (input: XLog, AcceptingPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		return Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. (input: XLog, ProcessTree; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		return Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. (input: XLog, StochasticLabelledPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}



// == command Ebi discover directly-follows-graph == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_directly_follows_graph__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.apache.commons.math3.fraction.BigFraction input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover directly-follows-graph", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiFraction.toEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a directly follows graph. (input: XLog; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a directly follows graph. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_directly_follows_graph__as__labelled_Petri_net__to__PetriNet(UIPluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiFraction.create_input_panel("The minimum fraction of traces that should fit the resulting model."));
		InteractionResult result = context.showWizard("Discover a directly follows graph.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		org.apache.commons.math3.fraction.BigFraction input_1 = dialog.get_parameter_org_apache_commons_math3_fraction_BigFraction(0);
		return Ebi_discover_directly_follows_graph__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_directly_follows_graph__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.apache.commons.math3.fraction.BigFraction input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover directly-follows-graph", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiFraction.toEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Discover a directly follows graph. (input: XLog; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a directly follows graph. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_directly_follows_graph__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(UIPluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiFraction.create_input_panel("The minimum fraction of traces that should fit the resulting model."));
		InteractionResult result = context.showWizard("Discover a directly follows graph.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		org.apache.commons.math3.fraction.BigFraction input_1 = dialog.get_parameter_org_apache_commons_math3_fraction_BigFraction(0);
		return Ebi_discover_directly_follows_graph__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}



// == command Ebi discover occurrence labelled-petri-net == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_occurrence_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence labelled-petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, StochasticLabelledPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_occurrence_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_discover_occurrence_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_occurrence_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence labelled-petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, ProcessTree; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_occurrence_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		return Ebi_discover_occurrence_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_occurrence_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence labelled-petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, AcceptingPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_occurrence_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		return Ebi_discover_occurrence_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_occurrence_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence labelled-petri-net", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, StochasticLabelledPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_occurrence_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_discover_occurrence_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_occurrence_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence labelled-petri-net", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, ProcessTree; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_occurrence_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		return Ebi_discover_occurrence_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_occurrence_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence labelled-petri-net", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, AcceptingPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_occurrence_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		return Ebi_discover_occurrence_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}



// == command Ebi discover occurrence process-tree == 



// == command Ebi discover uniform labelled-petri-net == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_uniform_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform labelled-petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1 in a labelled Petri net. (input: AcceptingPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1 in a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_uniform_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_discover_uniform_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_uniform_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform labelled-petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1 in a labelled Petri net. (input: ProcessTree; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1 in a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_uniform_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_discover_uniform_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_uniform_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform labelled-petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1 in a labelled Petri net. (input: StochasticLabelledPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1 in a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_uniform_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_discover_uniform_labelled_petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_uniform_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform labelled-petri-net", ".slpn", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1 in a labelled Petri net. (input: ProcessTree; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1 in a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_uniform_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_discover_uniform_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_uniform_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform labelled-petri-net", ".slpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1 in a labelled Petri net. (input: StochasticLabelledPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1 in a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_uniform_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_discover_uniform_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_uniform_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform labelled-petri-net", ".slpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1 in a labelled Petri net. (input: AcceptingPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1 in a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_uniform_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_discover_uniform_labelled_petri_net__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0);
	}



// == command Ebi discover uniform process-tree == 



// == command Ebi discover-non-stochastic flower deterministic-finite-automaton == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower deterministic-finite-automaton", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a DFA that supports any trace with the activities of the log. (input: XLog; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a DFA that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower deterministic-finite-automaton", ".lpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a DFA that supports any trace with the activities of the log. (input: AcceptingPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a DFA that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower deterministic-finite-automaton", ".lpn", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a DFA that supports any trace with the activities of the log. (input: ProcessTree; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a DFA that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower deterministic-finite-automaton", ".lpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a DFA that supports any trace with the activities of the log. (input: StochasticLabelledPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a DFA that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}



// == command Ebi discover-non-stochastic flower process-tree == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower process-tree", ".lpn", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a process tree that supports any trace with the activities of the log. (input: ProcessTree; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a process tree that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower process-tree", ".lpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a process tree that supports any trace with the activities of the log. (input: StochasticLabelledPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a process tree that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower process-tree", ".lpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a process tree that supports any trace with the activities of the log. (input: AcceptingPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a process tree that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower process-tree", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a process tree that supports any trace with the activities of the log. (input: XLog; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a process tree that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_process_tree__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower process-tree", ".ptree", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiProcessTree.EbiString2EfficientTree(context, result);
	}

	@Plugin(
		name = "Discover a process tree that supports any trace with the activities of the log. (input: AcceptingPetriNet; output: ProcessTree)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "ProcessTree" }, 
		returnTypes = { org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a process tree that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree prom_Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(context, input_0);
	}

	public static org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower process-tree", ".ptree", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiProcessTree.EbiString2EfficientTree(context, result);
	}

	@Plugin(
		name = "Discover a process tree that supports any trace with the activities of the log. (input: XLog; output: ProcessTree)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "ProcessTree" }, 
		returnTypes = { org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a process tree that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree prom_Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(context, input_0);
	}

	public static org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower process-tree", ".ptree", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiProcessTree.EbiString2EfficientTree(context, result);
	}

	@Plugin(
		name = "Discover a process tree that supports any trace with the activities of the log. (input: StochasticLabelledPetriNet; output: ProcessTree)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "ProcessTree" }, 
		returnTypes = { org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a process tree that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree prom_Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(context, input_0);
	}

	public static org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic flower process-tree", ".ptree", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiProcessTree.EbiString2EfficientTree(context, result);
	}

	@Plugin(
		name = "Discover a process tree that supports any trace with the activities of the log. (input: ProcessTree; output: ProcessTree)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "ProcessTree" }, 
		returnTypes = { org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a process tree that supports any trace with the activities of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree prom_Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_discover_non_stochastic_flower_process_tree__as__process_tree__to__ProcessTree(context, input_0);
	}



// == command Ebi discover-non-stochastic prefix-tree deterministic-finite-automaton == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_non_stochastic_prefix_tree_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic prefix-tree deterministic-finite-automaton", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a DFA that is a prefix tree of the log. (input: XLog; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a DFA that is a prefix tree of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_non_stochastic_prefix_tree_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_discover_non_stochastic_prefix_tree_deterministic_finite_automaton__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}



// == command Ebi discover-non-stochastic prefix-tree process-tree == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_non_stochastic_prefix_tree_process_tree__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic prefix-tree process-tree", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Discover a process tree that is a prefix tree of the log. (input: XLog; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a process tree that is a prefix tree of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_non_stochastic_prefix_tree_process_tree__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_discover_non_stochastic_prefix_tree_process_tree__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree Ebi_discover_non_stochastic_prefix_tree_process_tree__as__process_tree__to__ProcessTree(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover-non-stochastic prefix-tree process-tree", ".ptree", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiProcessTree.EbiString2EfficientTree(context, result);
	}

	@Plugin(
		name = "Discover a process tree that is a prefix tree of the log. (input: XLog; output: ProcessTree)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "ProcessTree" }, 
		returnTypes = { org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Discover a process tree that is a prefix tree of the log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree prom_Ebi_discover_non_stochastic_prefix_tree_process_tree__as__process_tree__to__ProcessTree(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_discover_non_stochastic_prefix_tree_process_tree__as__process_tree__to__ProcessTree(context, input_0);
	}



// == command Ebi information == 

	public static String Ebi_information__as__string__to__string(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Show information about a file. (input: ProcessTree; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about a file. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_information__as__string__to__string(context, input_0);
	}

	public static String Ebi_information__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Show information about a file. (input: XLog; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about a file. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_information__as__string__to__string(context, input_0);
	}

	public static String Ebi_information__as__string__to__string(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Show information about a file. (input: AcceptingPetriNet; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about a file. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_information__as__string__to__string(context, input_0);
	}

	public static String Ebi_information__as__string__to__string(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Show information about a file. (input: StochasticLabelledPetriNet; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about a file. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_information__as__string__to__string(context, input_0);
	}



// == command Ebi itself graph == 



// == command Ebi itself html == 

	public static String Ebi_itself_html__as__string__to__string(PluginContext context) throws Exception {
		String result = CallEbi.call_ebi("Ebi itself html", ".txt", new String[] {});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Print parts of the website. (input: ; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Print parts of the website. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = {  })
	public String prom_Ebi_itself_html__as__string__to__string(PluginContext context) throws Exception {
		return Ebi_itself_html__as__string__to__string(context);
	}



// == command Ebi itself java == 

	public static String Ebi_itself_java__as__string__to__string(PluginContext context) throws Exception {
		String result = CallEbi.call_ebi("Ebi itself java", ".txt", new String[] {});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Print the classes for Java. (input: ; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Print the classes for Java. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = {  })
	public String prom_Ebi_itself_java__as__string__to__string(PluginContext context) throws Exception {
		return Ebi_itself_java__as__string__to__string(context);
	}



// == command Ebi itself logo == 

	public static String Ebi_itself_logo__as__string__to__string(PluginContext context) throws Exception {
		String result = CallEbi.call_ebi("Ebi itself logo", ".txt", new String[] {});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Print the logo of Ebi. (input: ; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Print the logo of Ebi. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = {  })
	public String prom_Ebi_itself_logo__as__string__to__string(PluginContext context) throws Exception {
		return Ebi_itself_logo__as__string__to__string(context);
	}



// == command Ebi itself manual == 

	public static String Ebi_itself_manual__as__string__to__string(PluginContext context) throws Exception {
		String result = CallEbi.call_ebi("Ebi itself manual", ".txt", new String[] {});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Print the automatically generated parts of the manual of Ebi in Latex format. (input: ; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Print the automatically generated parts of the manual of Ebi in Latex format. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = {  })
	public String prom_Ebi_itself_manual__as__string__to__string(PluginContext context) throws Exception {
		return Ebi_itself_manual__as__string__to__string(context);
	}



// == command Ebi probability explain-trace == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi probability log == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_probability_log__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi probability log", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute the probability that a stochastic model produces any trace of a log. (input: XLog, XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute the probability that a stochastic model produces any trace of a log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_probability_log__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_probability_log__as__fraction__to__fraction(context, input_0, input_1);
	}

	public static org.apache.commons.math3.fraction.BigFraction Ebi_probability_log__as__fraction__to__fraction(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi probability log", ".frac", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute the probability that a stochastic model produces any trace of a log. (input: StochasticLabelledPetriNet, XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "StochasticLabelledPetriNet", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute the probability that a stochastic model produces any trace of a log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_probability_log__as__fraction__to__fraction(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_probability_log__as__fraction__to__fraction(context, input_0, input_1);
	}



// == command Ebi probability trace == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi sample folds == 

	public static org.deckfour.xes.model.XLog Ebi_sample_folds__as__event_log__to__XLog(PluginContext context, org.deckfour.xes.model.XLog input_0, Integer input_1, Integer input_2, Integer input_3) throws Exception {
		String result = CallEbi.call_ebi("Ebi sample folds", ".xes", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_3)});
		return org.processmining.ebi.objects.EbiEventLog.EbiStringToXLog(context, result);
	}

	@Plugin(
		name = "Randomly split a log into a given number of sub-logs, and return a specific one of these sub-logs. (input: XLog; output: XLog)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "XLog" }, 
		returnTypes = { org.deckfour.xes.model.XLog.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Randomly but reproducibly split a log into a given number of sub-logs. Each trace has a likelihood of 1/folds to end up in any of the folds. Giving the same random seed yields the same split, as long as the same build number of Ebi is used.          For instance, one can perform k-fold cross validation: one would repeatedly apply the folds command with the same seed and the same number of folds, but vary the returned sub-logs. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.deckfour.xes.model.XLog prom_Ebi_sample_folds__as__event_log__to__XLog(UIPluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("The number of folds."));
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("The random seed."));
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("The fold to be returned."));
		InteractionResult result = context.showWizard("Randomly split a log into a given number of sub-logs, and return a specific one of these sub-logs.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_1 = dialog.get_parameter_Integer(0);
		Integer input_2 = dialog.get_parameter_Integer(1);
		Integer input_3 = dialog.get_parameter_Integer(2);
		return Ebi_sample_folds__as__event_log__to__XLog(context, input_0, input_1, input_2, input_3);
	}



// == command Ebi sample traces == 



// == command Ebi test bootstrap-test == 

	public static String Ebi_test_bootstrap_test__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1, Integer input_2, org.apache.commons.math3.fraction.BigFraction input_3) throws Exception {
		String result = CallEbi.call_ebi("Ebi test bootstrap-test", ".txt", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2), org.processmining.ebi.objects.EbiFraction.toEbiString(context, input_3)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Test the hypothesis that the logs are derived from identical processes. (input: XLog, XLog; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Test the hypothesis that the logs are derived from identical processes. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public String prom_Ebi_test_bootstrap_test__as__string__to__string(UIPluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("The number of samples taken."));
		dialog.add_input(org.processmining.ebi.objects.EbiFraction.create_input_panel("The threshold p-value"));
		InteractionResult result = context.showWizard("Test the hypothesis that the logs are derived from identical processes.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		org.apache.commons.math3.fraction.BigFraction input_3 = dialog.get_parameter_org_apache_commons_math3_fraction_BigFraction(1);
		return Ebi_test_bootstrap_test__as__string__to__string(context, input_0, input_1, input_2, input_3);
	}



// == command Ebi test log-categorical-attribute == 

	public static String Ebi_test_log_categorical_attribute__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0, String input_1, Integer input_2, org.apache.commons.math3.fraction.BigFraction input_3) throws Exception {
		String result = CallEbi.call_ebi("Ebi test log-categorical-attribute", ".txt", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiString.toEbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2), org.processmining.ebi.objects.EbiFraction.toEbiString(context, input_3)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Test the hypothesis that the sub-logs defined by the categorical attribute are derived from identical processes. (input: XLog; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Test the hypothesis that the sub-logs defined by the categorical attribute are derived from identical processes. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_test_log_categorical_attribute__as__string__to__string(UIPluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiString.create_input_panel("The trace attribute for which the test is to be performed. The trace attributes of a log can be found using `Ebi info`."));
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("The number of samples taken."));
		dialog.add_input(org.processmining.ebi.objects.EbiFraction.create_input_panel("The threshold p-value."));
		InteractionResult result = context.showWizard("Test the hypothesis that the sub-logs defined by the categorical attribute are derived from identical processes.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		String input_1 = dialog.get_parameter_String(0);
		Integer input_2 = dialog.get_parameter_Integer(1);
		org.apache.commons.math3.fraction.BigFraction input_3 = dialog.get_parameter_org_apache_commons_math3_fraction_BigFraction(2);
		return Ebi_test_log_categorical_attribute__as__string__to__string(context, input_0, input_1, input_2, input_3);
	}



// == command Ebi validate == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi visualise graph == 



// == command Ebi visualise text == 

	public static String Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise a file as text. (input: AcceptingPetriNet; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise a file as text. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_visualise_text__as__string__to__string(context, input_0);
	}

	public static String Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise a file as text. (input: StochasticLabelledPetriNet; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise a file as text. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_visualise_text__as__string__to__string(context, input_0);
	}

	public static String Ebi_visualise_text__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise a file as text. (input: XLog; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise a file as text. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_visualise_text__as__string__to__string(context, input_0);
	}

	public static String Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise a file as text. (input: ProcessTree; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "ProcessTree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise a file as text. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_visualise_text__as__string__to__string(context, input_0);
	}

@SuppressWarnings("unused")

	private static void call_every_ebi_to_java_translator(PluginContext context) throws Exception {
		{
			org.deckfour.xes.model.XLog input = org.processmining.ebi.objects.EbiEventLog.EbiStringToXLog(context, "");
			org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input);
		}
		{
			org.processmining.models.graphbased.directed.petrinet.Petrinet input = org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, "");
		}
		{
			org.processmining.acceptingpetrinet.models.AcceptingPetriNet input = null;
			org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input);
		}
		{
			org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input = org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, "");
			org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input);
		}
		{
			org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input = org.processmining.ebi.objects.EbiProcessTree.EbiString2EfficientTree(context, "");
			org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input);
		}
		{
			org.deckfour.xes.model.XLog input = org.processmining.ebi.objects.EbiEventLog.EbiStringToXLog(context, "");
			org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input);
		}
		{
			org.deckfour.xes.model.XLog input = org.processmining.ebi.objects.EbiEventLog.EbiStringToXLog(context, "");
			org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input);
		}
		{
			org.processmining.models.graphbased.directed.petrinet.Petrinet input = org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, "");
		}
		{
			org.processmining.acceptingpetrinet.models.AcceptingPetriNet input = null;
			org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input);
		}
		{
			org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input = org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, "");
			org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input);
		}
		{
			org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input = org.processmining.ebi.objects.EbiProcessTree.EbiString2EfficientTree(context, "");
			org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input);
		}
		{
			String input = org.processmining.ebi.objects.EbiString.fromEbiString(context, "");
			org.processmining.ebi.objects.EbiString.toEbiString(context, input);
		}
		{
			Integer input = org.processmining.ebi.objects.EbiInteger.fromEbiString(context, "");
			org.processmining.ebi.objects.EbiInteger.toEbiString(context, input);
		}
		{
			org.apache.commons.math3.fraction.BigFraction input = org.processmining.ebi.objects.EbiFraction.fromEbiString(context, "");
			org.processmining.ebi.objects.EbiFraction.toEbiString(context, input);
		}
	}

}

