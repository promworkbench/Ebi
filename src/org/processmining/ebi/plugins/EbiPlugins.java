package org.processmining.ebi.plugins;

import org.deckfour.uitopia.api.event.TaskListener.InteractionResult;
import org.processmining.contexts.uitopia.UIPluginContext;
import org.processmining.contexts.uitopia.annotations.UITopiaVariant;
import org.processmining.ebi.CallEbi;
import org.processmining.framework.plugin.PluginContext;
import org.processmining.framework.plugin.annotations.Plugin;
import org.processmining.framework.plugin.annotations.PluginCategory;
import org.processmining.framework.plugin.annotations.PluginLevel;
import org.processmining.framework.plugin.annotations.PluginVariant;
import org.processmining.plugins.InductiveMiner.plugins.dialogs.IMMiningDialog;


/**
 * This file is automatically generated by Ebi. Do not edit it manually.
 * @author sander
 *
 */
public class EbiPlugins {



// == command Ebi analyse all-traces == 



// == command Ebi analyse completeness == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_analyse_completeness__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse completeness", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Estimate the completeness of a finite language using species discovery. (input: XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Estimate the completeness of a finite language using species discovery. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_analyse_completeness__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_analyse_completeness__as__fraction__to__fraction(context, input_0);
	}



// == command Ebi analyse coverage == 



// == command Ebi analyse medoid == 



// == command Ebi analyse minimum-probability-traces == 



// == command Ebi analyse mode == 



// == command Ebi analyse most-likely-traces == 



// == command Ebi analyse variety == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_analyse_variety__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi analyse variety", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute the variety of a stochastic language. That is, the average distance between two arbitrary traces in the language. (input: XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute the variety of a stochastic language. That is, the average distance between two arbitrary traces in the language. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_analyse_variety__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_analyse_variety__as__fraction__to__fraction(context, input_0);
	}



// == command Ebi analyse-non-stochastic alignment == 



// == command Ebi analyse-non-stochastic cluster == 



// == command Ebi analyse-non-stochastic executions == 



// == command Ebi analyse-non-stochastic medoid == 



// == command Ebi association all-trace-attributes == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi association trace-attribute == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi conformance earth-movers-stochastic-conformance == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_conformance_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance earth-movers-stochastic-conformance", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Earth mover's stochastic conformance. (input: XLog, XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Earth mover's stochastic conformance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_conformance_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_conformance_earth_movers_stochastic_conformance__as__fraction__to__fraction(context, input_0, input_1);
	}



// == command Ebi conformance earth-movers-stochastic-conformance-sample == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance earth-movers-stochastic-conformance-sample", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Earth mover's stochastic conformance with sampling. (input: XLog, StochasticLabelledPetriNet; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Earth mover's stochastic conformance with sampling. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(UIPluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Earth mover's stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(context, input_0, input_1, input_2);
	}

	public static org.apache.commons.math3.fraction.BigFraction Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance earth-movers-stochastic-conformance-sample", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Earth mover's stochastic conformance with sampling. (input: XLog, XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Earth mover's stochastic conformance with sampling. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(UIPluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Earth mover's stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_earth_movers_stochastic_conformance_sample__as__fraction__to__fraction(context, input_0, input_1, input_2);
	}



// == command Ebi conformance entropic-relevance == 

	public static org.processmining.ebi.objects.EbiLogDiv Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance entropic-relevance", ".logdiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute entropic relevance (uniform). (input: XLog, StochasticLabelledPetriNet; output: logdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv" }, 
		returnTypes = { org.processmining.ebi.objects.EbiLogDiv.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute entropic relevance (uniform). (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.ebi.objects.EbiLogDiv prom_Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(context, input_0, input_1);
	}

	public static org.processmining.ebi.objects.EbiLogDiv Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance entropic-relevance", ".logdiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute entropic relevance (uniform). (input: XLog, XLog; output: logdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "logdiv" }, 
		returnTypes = { org.processmining.ebi.objects.EbiLogDiv.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute entropic relevance (uniform). (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.ebi.objects.EbiLogDiv prom_Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_conformance_entropic_relevance__as__logdiv__to__logdiv(context, input_0, input_1);
	}



// == command Ebi conformance jensen-shannon == 

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance. (input: XLog, XLog; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance. (input: XLog, StochasticLabelledPetriNet; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_conformance_jensen_shannon__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1);
	}



// == command Ebi conformance jensen-shannon-sample == 

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.deckfour.xes.model.XLog input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling. (input: StochasticLabelledPetriNet, XLog; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "StochasticLabelledPetriNet", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(UIPluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Jensen-Shannon stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1, input_2);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling. (input: StochasticLabelledPetriNet, StochasticLabelledPetriNet; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "StochasticLabelledPetriNet", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(UIPluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Jensen-Shannon stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1, input_2);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling. (input: XLog, XLog; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(UIPluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Jensen-Shannon stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1, input_2);
	}

	public static org.processmining.framework.util.HTMLToString Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1, Integer input_2) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance jensen-shannon-sample", ".rldiv", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1), org.processmining.ebi.objects.EbiInteger.toEbiString(context, input_2)});
		return org.processmining.ebi.objects.EbiRootLogDiv.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute Jensen-Shannon stochastic conformance with sampling. (input: XLog, StochasticLabelledPetriNet; output: rootlogdiv)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "rootlogdiv" }, 
		returnTypes = { org.processmining.framework.util.HTMLToString.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute Jensen-Shannon stochastic conformance with sampling. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.framework.util.HTMLToString prom_Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(UIPluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		EbiDialog dialog = new EbiDialog();
		dialog.add_input(org.processmining.ebi.objects.EbiInteger.create_input_panel("Number of traces to sample."));
		InteractionResult result = context.showWizard("Compute Jensen-Shannon stochastic conformance with sampling.", true, true, dialog);

		if (result != InteractionResult.FINISHED) {
			context.getFutureResult(0).cancel(false);
			return null;
}
		Integer input_2 = dialog.get_parameter_Integer(0);
		return Ebi_conformance_jensen_shannon_sample__as__rootlogdiv__to__rootlogdiv(context, input_0, input_1, input_2);
	}



// == command Ebi conformance unit-earth-movers-stochastic-conformance == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance unit-earth-movers-stochastic-conformance", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute unit-earth movers' stochastic conformance. (input: XLog, XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute unit-earth movers' stochastic conformance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(context, input_0, input_1);
	}

	public static org.apache.commons.math3.fraction.BigFraction Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi conformance unit-earth-movers-stochastic-conformance", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute unit-earth movers' stochastic conformance. (input: XLog, StochasticLabelledPetriNet; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute unit-earth movers' stochastic conformance. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_conformance_unit_earth_movers_stochastic_conformance__as__fraction__to__fraction(context, input_0, input_1);
	}



// == command Ebi convert finite-stochastic-language == 



// == command Ebi convert labelled-Petri-net == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi convert labelled-Petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Convert an object to a labelled Petri net. (input: StochasticLabelledPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi convert labelled-Petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Convert an object to a labelled Petri net. (input: process tree; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "process tree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi convert labelled-Petri-net", ".lpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Convert an object to a labelled Petri net. (input: AcceptingPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a labelled Petri net. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_convert_labelled_Petri_net__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}



// == command Ebi convert stochastic-finite-deterministic-automaton == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_convert_stochastic_finite_deterministic_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi convert stochastic-finite-deterministic-automaton", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Convert an object to a stochastic deterministic finite automaton. (input: XLog; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Convert an object to a stochastic deterministic finite automaton. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_convert_stochastic_finite_deterministic_automaton__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_convert_stochastic_finite_deterministic_automaton__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}



// == command Ebi discover alignments == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (input: XLog, AcceptingPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		return Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (input: XLog, StochasticLabelledPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (input: XLog, process tree; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "process tree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		return Ebi_discover_alignments__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (input: XLog, process tree; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "process tree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		return Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (input: XLog, AcceptingPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		return Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover alignments", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (input: XLog, StochasticLabelledPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the aligned occurrences of its label. The model must be livelock-free. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_discover_alignments__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}



// == command Ebi discover occurrence == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_occurrence__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, StochasticLabelledPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_occurrence__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_discover_occurrence__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_occurrence__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, process tree; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "process tree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_occurrence__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		return Ebi_discover_occurrence__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_occurrence__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence", ".lpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, AcceptingPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_occurrence__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		return Ebi_discover_occurrence__as__labelled_Petri_net__to__PetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, AcceptingPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_1) throws Exception {
		return Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, process tree; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "process tree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_1) throws Exception {
		return Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover occurrence", ".slpn", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (input: XLog, StochasticLabelledPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "XLog", "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight that matches the occurrences of its label; silent transitions get a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.deckfour.xes.model.XLog input_0, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_1) throws Exception {
		return Ebi_discover_occurrence__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0, input_1);
	}



// == command Ebi discover uniform == 

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_uniform__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform", ".lpn", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1. (input: process tree; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "process tree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_uniform__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_discover_uniform__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_uniform__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform", ".lpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1. (input: StochasticLabelledPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_uniform__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_discover_uniform__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.models.graphbased.directed.petrinet.Petrinet Ebi_discover_uniform__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform", ".lpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1. (input: AcceptingPetriNet; output: PetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "PetriNet" }, 
		returnTypes = { org.processmining.models.graphbased.directed.petrinet.Petrinet.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.models.graphbased.directed.petrinet.Petrinet prom_Ebi_discover_uniform__as__labelled_Petri_net__to__PetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_discover_uniform__as__labelled_Petri_net__to__PetriNet(context, input_0);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform", ".slpn", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1. (input: AcceptingPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform", ".slpn", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1. (input: StochasticLabelledPetriNet; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0);
	}

	public static org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi discover uniform", ".slpn", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, result);
	}

	@Plugin(
		name = "Give each transition a weight of 1. (input: process tree; output: StochasticLabelledPetriNet)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "StochasticLabelledPetriNet" }, 
		returnTypes = { org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights.class },
		parameterLabels = { "process tree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Give each transition a weight of 1. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights prom_Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_discover_uniform__as__stochastic_labelled_Petri_net__to__StochasticLabelledPetriNet(context, input_0);
	}



// == command Ebi information == 

	public static String Ebi_information__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Show information about an object. (input: XLog; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about an object. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_information__as__string__to__string(context, input_0);
	}

	public static String Ebi_information__as__string__to__string(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Show information about an object. (input: AcceptingPetriNet; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about an object. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_information__as__string__to__string(context, input_0);
	}

	public static String Ebi_information__as__string__to__string(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Show information about an object. (input: process tree; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "process tree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about an object. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_information__as__string__to__string(context, input_0);
	}

	public static String Ebi_information__as__string__to__string(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi information", ".txt", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Show information about an object. (input: StochasticLabelledPetriNet; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Show information about an object. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_information__as__string__to__string(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_information__as__string__to__string(context, input_0);
	}



// == command Ebi itself graph == 



// == command Ebi itself java == 

	public static String Ebi_itself_java__as__string__to__string(PluginContext context) throws Exception {
		String result = CallEbi.call_ebi("Ebi itself java", ".txt", new String[] {});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Print the classes for Java. (input: ; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Print the classes for Java. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = {  })
	public String prom_Ebi_itself_java__as__string__to__string(PluginContext context) throws Exception {
		return Ebi_itself_java__as__string__to__string(context);
	}



// == command Ebi itself logo == 

	public static String Ebi_itself_logo__as__string__to__string(PluginContext context) throws Exception {
		String result = CallEbi.call_ebi("Ebi itself logo", ".txt", new String[] {});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Print the logo of Ebi. (input: ; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Print the logo of Ebi. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = {  })
	public String prom_Ebi_itself_logo__as__string__to__string(PluginContext context) throws Exception {
		return Ebi_itself_logo__as__string__to__string(context);
	}



// == command Ebi itself manual == 

	public static String Ebi_itself_manual__as__string__to__string(PluginContext context) throws Exception {
		String result = CallEbi.call_ebi("Ebi itself manual", ".txt", new String[] {});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Print the automatically generated parts of the manual of Ebi in Latex format. (input: ; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Print the automatically generated parts of the manual of Ebi in Latex format. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = {  })
	public String prom_Ebi_itself_manual__as__string__to__string(PluginContext context) throws Exception {
		return Ebi_itself_manual__as__string__to__string(context);
	}



// == command Ebi probability explain-trace == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi probability model == 

	public static org.apache.commons.math3.fraction.BigFraction Ebi_probability_model__as__fraction__to__fraction(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi probability model", ".frac", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute the probability that a queriable stochastic language (stochastic model) produces any trace of a log. (input: StochasticLabelledPetriNet, XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "StochasticLabelledPetriNet", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute the probability that a queriable stochastic language (stochastic model) produces any trace of a log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_probability_model__as__fraction__to__fraction(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_probability_model__as__fraction__to__fraction(context, input_0, input_1);
	}

	public static org.apache.commons.math3.fraction.BigFraction Ebi_probability_model__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		String result = CallEbi.call_ebi("Ebi probability model", ".frac", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0), org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_1)});
		return org.processmining.ebi.objects.EbiFraction.fromEbiString(context, result);
	}

	@Plugin(
		name = "Compute the probability that a queriable stochastic language (stochastic model) produces any trace of a log. (input: XLog, XLog; output: fraction)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "fraction" }, 
		returnTypes = { org.apache.commons.math3.fraction.BigFraction.class },
		parameterLabels = { "XLog", "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Compute the probability that a queriable stochastic language (stochastic model) produces any trace of a log. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0, 1 })
	public org.apache.commons.math3.fraction.BigFraction prom_Ebi_probability_model__as__fraction__to__fraction(PluginContext context, org.deckfour.xes.model.XLog input_0, org.deckfour.xes.model.XLog input_1) throws Exception {
		return Ebi_probability_model__as__fraction__to__fraction(context, input_0, input_1);
	}



// == command Ebi probability trace == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi sample == 



// == command Ebi test log-categorical-attribute == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi validate == 

	//command cannot be called from Java as it takes non-standard input from the command line



// == command Ebi visualise pdf == 



// == command Ebi visualise svg == 

	public static com.kitfox.svg.SVGDiagram Ebi_visualise_svg__as__SVG__to__svg(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise svg", ".svg", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiSvg.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise an object as scalable vector graphics. (input: StochasticLabelledPetriNet; output: svg)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "svg" }, 
		returnTypes = { com.kitfox.svg.SVGDiagram.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as scalable vector graphics. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public com.kitfox.svg.SVGDiagram prom_Ebi_visualise_svg__as__SVG__to__svg(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_visualise_svg__as__SVG__to__svg(context, input_0);
	}

	public static com.kitfox.svg.SVGDiagram Ebi_visualise_svg__as__SVG__to__svg(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise svg", ".svg", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiSvg.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise an object as scalable vector graphics. (input: process tree; output: svg)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "svg" }, 
		returnTypes = { com.kitfox.svg.SVGDiagram.class },
		parameterLabels = { "process tree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as scalable vector graphics. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public com.kitfox.svg.SVGDiagram prom_Ebi_visualise_svg__as__SVG__to__svg(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_visualise_svg__as__SVG__to__svg(context, input_0);
	}

	public static com.kitfox.svg.SVGDiagram Ebi_visualise_svg__as__SVG__to__svg(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise svg", ".svg", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiSvg.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise an object as scalable vector graphics. (input: AcceptingPetriNet; output: svg)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "svg" }, 
		returnTypes = { com.kitfox.svg.SVGDiagram.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as scalable vector graphics. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public com.kitfox.svg.SVGDiagram prom_Ebi_visualise_svg__as__SVG__to__svg(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_visualise_svg__as__SVG__to__svg(context, input_0);
	}



// == command Ebi visualise text == 

	public static String Ebi_visualise_text__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise an object as text. (input: XLog; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "XLog" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as text. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string(PluginContext context, org.deckfour.xes.model.XLog input_0) throws Exception {
		return Ebi_visualise_text__as__string__to__string(context, input_0);
	}

	public static String Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise an object as text. (input: StochasticLabelledPetriNet; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "StochasticLabelledPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as text. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input_0) throws Exception {
		return Ebi_visualise_text__as__string__to__string(context, input_0);
	}

	public static String Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise an object as text. (input: AcceptingPetriNet; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "AcceptingPetriNet" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as text. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.acceptingpetrinet.models.AcceptingPetriNet input_0) throws Exception {
		return Ebi_visualise_text__as__string__to__string(context, input_0);
	}

	public static String Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		String result = CallEbi.call_ebi("Ebi visualise text", ".txt", new String[] {org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input_0)});
		return org.processmining.ebi.objects.EbiString.fromEbiString(context, result);
	}

	@Plugin(
		name = "Visualise an object as text. (input: process tree; output: string)",
		level = PluginLevel.PeerReviewed, 
		returnLabels = { "string" }, 
		returnTypes = { String.class },
		parameterLabels = { "process tree" },
		userAccessible = true,
		categories = { PluginCategory.Discovery, PluginCategory.Analytics, PluginCategory.ConformanceChecking },
		help = "Visualise an object as text. (calls Ebi)"
	)
	@UITopiaVariant(affiliation = IMMiningDialog.affiliation, author = IMMiningDialog.author, email = IMMiningDialog.email)
	@PluginVariant(variantLabel = "Call Ebi", requiredParameterLabels = { 0 })
	public String prom_Ebi_visualise_text__as__string__to__string(PluginContext context, org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input_0) throws Exception {
		return Ebi_visualise_text__as__string__to__string(context, input_0);
	}

@SuppressWarnings("unused")

	private static void call_every_ebi_to_java_translator(PluginContext context) throws Exception {
		{
			org.deckfour.xes.model.XLog input = org.processmining.ebi.objects.EbiEventLog.EbiStringToXLog(context, "");
			org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input);
		}
		{
			org.processmining.models.graphbased.directed.petrinet.Petrinet input = org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, "");
		}
		{
			org.processmining.acceptingpetrinet.models.AcceptingPetriNet input = null;
			org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input);
		}
		{
			org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input = org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, "");
			org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input);
		}
		{
			org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input = org.processmining.ebi.objects.EbiProcessTree.EbiString2EfficientTree(context, "");
			org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input);
		}
		{
			org.deckfour.xes.model.XLog input = org.processmining.ebi.objects.EbiEventLog.EbiStringToXLog(context, "");
			org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input);
		}
		{
			org.deckfour.xes.model.XLog input = org.processmining.ebi.objects.EbiEventLog.EbiStringToXLog(context, "");
			org.processmining.ebi.objects.EbiEventLog.XLogToEbiString(context, input);
		}
		{
			org.processmining.models.graphbased.directed.petrinet.Petrinet input = org.processmining.ebi.objects.EbiLabelledPetriNet.EbiString2Petrinet(context, "");
		}
		{
			org.processmining.acceptingpetrinet.models.AcceptingPetriNet input = null;
			org.processmining.ebi.objects.EbiLabelledPetriNet.AcceptingPetriNet2EbiString(context, input);
		}
		{
			org.processmining.stochasticlabelledpetrinets.StochasticLabelledPetriNetSimpleWeights input = org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.EbiString2StochasticLabelledPetriNet(context, "");
			org.processmining.ebi.objects.EbiStochasticLabelledPetriNet.StochasticLabelledPetriNet2EbiString(context, input);
		}
		{
			org.processmining.plugins.InductiveMiner.efficienttree.EfficientTree input = org.processmining.ebi.objects.EbiProcessTree.EbiString2EfficientTree(context, "");
			org.processmining.ebi.objects.EbiProcessTree.EfficientTree2EbiString(context, input);
		}
		{
			String input = org.processmining.ebi.objects.EbiString.fromEbiString(context, "");
			org.processmining.ebi.objects.EbiString.toEbiString(context, input);
		}
		{
			Integer input = org.processmining.ebi.objects.EbiInteger.fromEbiString(context, "");
			org.processmining.ebi.objects.EbiInteger.toEbiString(context, input);
		}
		{
			org.apache.commons.math3.fraction.BigFraction input = org.processmining.ebi.objects.EbiFraction.fromEbiString(context, "");
			org.processmining.ebi.objects.EbiFraction.toEbiString(context, input);
		}
	}

}

